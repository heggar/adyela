name: CI - API Appointments

on:
  push:
    branches: [main, develop, feature/**]
    paths:
      - 'apps/api-appointments/**'
      - '.github/workflows/ci-api-appointments.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/api-appointments/**'

env:
  PYTHON_VERSION: '3.12'
  SERVICE_NAME: 'api-appointments'

jobs:
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        working-directory: apps/api-appointments
        run: |
          poetry install --no-interaction

      - name: Run Ruff linter
        working-directory: apps/api-appointments
        run: poetry run ruff check .

      - name: Run Black formatter check
        working-directory: apps/api-appointments
        run: poetry run black --check .

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        working-directory: apps/api-appointments
        run: poetry install --no-interaction

      - name: Run MyPy type checker
        working-directory: apps/api-appointments
        run: poetry run mypy .

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        working-directory: apps/api-appointments
        run: poetry install --no-interaction

      - name: Run pytest
        working-directory: apps/api-appointments
        run: |
          poetry run pytest tests/unit \
            --cov=adyela_api_appointments \
            --cov-report=xml \
            --cov-report=term \
            --cov-fail-under=80
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./apps/api-appointments/coverage.xml
          flags: api-appointments-unit
          name: api-appointments-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      firestore:
        image: google/cloud-sdk:alpine
        ports:
          - 8080:8080
        options: >-
          --health-cmd "curl -f http://localhost:8080 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        working-directory: apps/api-appointments
        run: poetry install --no-interaction

      - name: Run integration tests
        working-directory: apps/api-appointments
        run: poetry run pytest tests/integration -v
        continue-on-error: true
        env:
          FIRESTORE_EMULATOR_HOST: localhost:8080

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        working-directory: apps/api-appointments
        run: poetry install --no-interaction

      - name: Run Bandit security scanner
        working-directory: apps/api-appointments
        run: poetry run bandit -r adyela_api_appointments -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report-appointments
          path: apps/api-appointments/bandit-report.json

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check, unit-tests, security-scan]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/api-appointments
          push: false
          tags: adyela/api-appointments:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
