name: Quality Gate

on:
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/**'
      - 'packages/**'
      - 'infra/**'
      - 'scripts/**'
      - '.github/workflows/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'pyproject.toml'
      - 'poetry.lock'
  push:
    branches: [main, develop]
    paths:
      - 'apps/**'
      - 'packages/**'
      - 'infra/**'
      - 'scripts/**'
      - '.github/workflows/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'pyproject.toml'
      - 'poetry.lock'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Code Quality (Linting, Formatting, Type Checking)
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Python dependencies
        working-directory: apps/api
        run: |
          pip install poetry
          poetry install --no-dev

      # Frontend Quality Checks
      - name: Frontend - Type Check
        run: pnpm type-check
        working-directory: apps/web

      - name: Frontend - Lint
        run: pnpm lint
        working-directory: apps/web

      - name: Frontend - Format Check
        run: pnpm format:check
        working-directory: apps/web

      # Backend Quality Checks
      - name: Backend - Type Check
        working-directory: apps/api
        run: poetry run mypy .

      - name: Backend - Lint
        working-directory: apps/api
        run: poetry run ruff check .

      - name: Backend - Format Check
        working-directory: apps/api
        run: poetry run black --check .

      # Infrastructure Quality Checks
      - name: Terraform - Format Check
        run: |
          cd infra
          terraform fmt -check -recursive

      - name: Terraform - Validate
        run: |
          cd infra/environments/staging
          terraform init -backend=false
          terraform validate

  # Job 2: Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Python dependencies
        working-directory: apps/api
        run: |
          pip install poetry
          poetry install --no-dev

      # Secret Scanning
      - name: Gitleaks - Secret Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      # Dependency Security Scanning
      - name: Frontend - Security Audit
        run: pnpm audit --audit-level moderate
        working-directory: apps/web

      - name: Backend - Security Audit
        working-directory: apps/api
        run: |
          poetry run safety check --json --output safety-report.json || true
          if [ -f safety-report.json ]; then
            echo "Safety report generated"
            cat safety-report.json
          fi

      # Code Security Analysis
      - name: Backend - Bandit Security Scan
        working-directory: apps/api
        run: |
          poetry run bandit -r . -f json -o bandit-report.json || true
          if [ -f bandit-report.json ]; then
            echo "Bandit report generated"
            cat bandit-report.json
          fi

  # Job 3: Testing with Coverage
  testing:
    name: Testing & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Python dependencies
        working-directory: apps/api
        run: |
          pip install poetry
          poetry install

      # Frontend Tests
      - name: Frontend - Unit Tests
        run: pnpm test:coverage
        working-directory: apps/web

      - name: Frontend - Coverage Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-coverage
          path: apps/web/coverage/

      # Backend Tests
      - name: Backend - Unit Tests
        working-directory: apps/api
        run: poetry run pytest --cov=adyela_api --cov-report=xml --cov-report=html

      - name: Backend - Coverage Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-coverage
          path: apps/api/htmlcov/

      # Coverage Threshold Check
      - name: Check Coverage Thresholds
        run: |
          echo "Coverage thresholds:"
          echo "Frontend: 80% minimum"
          echo "Backend: 80% minimum"
          echo "Coverage reports uploaded as artifacts"

  # Job 4: Build Verification
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Python dependencies
        working-directory: apps/api
        run: |
          pip install poetry
          poetry install --no-dev

      # Frontend Build
      - name: Frontend - Build
        run: pnpm build
        working-directory: apps/web

      - name: Frontend - Bundle Size Check
        run: |
          echo "Checking bundle size..."
          du -sh apps/web/dist/
          # Add bundle size analysis here if needed

      # Backend Build Check
      - name: Backend - Import Check
        working-directory: apps/api
        run: |
          poetry run python -c "import adyela_api; print('Backend imports successfully')"

      # Infrastructure Build Check
      - name: Terraform - Plan Check
        run: |
          cd infra/environments/staging
          terraform init -backend=false
          terraform plan -detailed-exitcode || true

  # Job 5: Performance & Bundle Analysis
  performance:
    name: Performance Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Frontend - Build for Analysis
        run: pnpm build
        working-directory: apps/web

      - name: Bundle Size Analysis
        run: |
          echo "Bundle size analysis:"
          find apps/web/dist -name "*.js" -exec du -h {} \; | sort -hr | head -10
          echo "Total bundle size:"
          du -sh apps/web/dist/

      - name: Performance Budget Check
        run: |
          # Add performance budget checks here
          echo "Performance budget:"
          echo "- Main bundle: < 500KB"
          echo "- Vendor bundle: < 1MB"
          echo "- Total assets: < 2MB"

  # Job 6: Quality Gate Summary
  quality-gate-summary:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [code-quality, security, testing, build-verification]
    if: always()

    steps:
      - name: Quality Gate Results
        run: |
          echo "## 🚀 Quality Gate Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Testing | ${{ needs.testing.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build-verification.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.code-quality.result }}" == "success" && "${{ needs.security.result }}" == "success" && "${{ needs.testing.result }}" == "success" && "${{ needs.build-verification.result }}" == "success" ]]; then
            echo "🎉 **All quality checks passed!** Ready for merge." >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "⚠️ **Some quality checks failed.** Please review and fix issues before merging." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
