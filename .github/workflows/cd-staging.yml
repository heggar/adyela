name: CD - Staging

# Staging deployment with MINIMAL GCP resources to reduce costs
# - Scale to zero when not used (min-instances=0)
# - Maximum 1 instance (max-instances=1)
# - Minimal CPU (0.5) and memory (256Mi)
# - No VPC connector, no CDN, no backups
# - Estimated cost: $5-10/month

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to deploy (e.g., v1.2.3 or commit SHA)"
        required: true
        type: string
      skip_e2e:
        description: "Skip E2E tests"
        required: false
        type: boolean
        default: false

env:
  ENVIRONMENT: staging
  GCP_REGION: us-central1
  API_SERVICE_NAME: adyela-api-staging
  WEB_BUCKET_NAME: adyela-web-staging

permissions:
  contents: read
  id-token: write
  deployments: write
  issues: write
  security-events: write

jobs:
  approval:
    name: Deployment Approval
    runs-on: ubuntu-latest
    environment:
      name: staging-approval
    steps:
      - name: Manual approval checkpoint
        run: |
          echo "Deploying version: ${{ inputs.version }}"
          echo "Skip E2E: ${{ inputs.skip_e2e }}"

  build-api:
    name: Build API Docker Image
    runs-on: ubuntu-latest
    needs: [approval]
    outputs:
      image-version: ${{ inputs.version }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: "main"

      - name: Reset to specific commit
        run: git reset --hard ${{ inputs.version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_STAGING }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_STAGING }}

      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_STAGING }}/adyela/${{ env.API_SERVICE_NAME }}
          tags: |
            type=raw,value=${{ inputs.version }}
            type=sha,prefix={{branch}}-
            type=raw,value=latest

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: apps/api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENVIRONMENT=${{ env.ENVIRONMENT }}
          provenance: true
          sbom: true

      - name: Sign container image
        continue-on-error: true
        run: |
          cosign sign --key env://COSIGN_PRIVATE_KEY \
            ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_STAGING }}/adyela/${{ env.API_SERVICE_NAME }}@${{ steps.build.outputs.digest }}
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

  deploy-api:
    name: Deploy API to Cloud Run
    runs-on: ubuntu-latest
    needs: [build-api]
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    outputs:
      api-url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: "main"

      - name: Reset to specific commit
        run: git reset --hard ${{ inputs.version }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_STAGING }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_STAGING }}

      - name: Setup GCP SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Build image reference
        id: image
        run: |
          # Construct full image reference from version + project secret
          REGISTRY="${{ env.GCP_REGION }}-docker.pkg.dev"
          PROJECT="${{ secrets.GCP_PROJECT_ID_STAGING }}"
          REPOSITORY="adyela"
          SERVICE="${{ env.API_SERVICE_NAME }}"
          VERSION="${{ needs.build-api.outputs.image-version }}"
          IMAGE="${REGISTRY}/${PROJECT}/${REPOSITORY}/${SERVICE}:${VERSION}"
          echo "image=${IMAGE}" >> "$GITHUB_OUTPUT"
          echo "Full image reference: ${IMAGE}"

      - name: Deploy to Cloud Run (Minimal Resources)
        id: deploy
        run: |
          # Convert version to GCP-compliant label (replace dots with dashes)
          VERSION_LABEL=$(echo "${{ inputs.version }}" | tr '.' '-')

          gcloud run deploy ${{ env.API_SERVICE_NAME }} \
            --image ${{ steps.image.outputs.image }} \
            --region ${{ env.GCP_REGION }} \
            --platform managed \
            --set-env-vars="ENVIRONMENT=${{ env.ENVIRONMENT }},VERSION=${{ inputs.version }},GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID_STAGING }}" \
            --set-secrets="SECRET_KEY=api-secret-key:latest,FIREBASE_PROJECT_ID=firebase-project-id:latest" \
            --min-instances=0 \
            --max-instances=1 \
            --memory=512Mi \
            --cpu=1 \
            --timeout=300s \
            --concurrency=80 \
            --port=8000 \
            --service-account=${{ secrets.SERVICE_ACCOUNT_STAGING }} \
            --labels="environment=staging,version=${VERSION_LABEL},deployed-by=github-actions"

          URL=$(gcloud run services describe ${{ env.API_SERVICE_NAME }} --region ${{ env.GCP_REGION }} --format='value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Wait for deployment stabilization
        run: |
          echo "Waiting for Cloud Run service to stabilize..."
          sleep 30

      - name: Verify deployment health
        continue-on-error: true
        run: |
          MAX_RETRIES=5
          RETRY_COUNT=0

          # Get identity token for authenticated requests
          TOKEN=$(gcloud auth print-identity-token)

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            # VERIFICA LA RUTA RAÍZ "/"
            if curl -f -H "Authorization: Bearer $TOKEN" ${{ steps.deploy.outputs.url }}/; then
              echo "Health check passed"
              exit 0
            fi

            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "Health check failed. Retry $RETRY_COUNT/$MAX_RETRIES"
            sleep 10
          done

          echo "Health check failed after $MAX_RETRIES retries"
          exit 1

  build-web:
    name: Build Web Docker Image
    runs-on: ubuntu-latest
    needs: [approval]
    outputs:
      image-version: ${{ steps.output.outputs.image-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: "main"

      - name: Reset to specific commit
        run: git reset --hard ${{ inputs.version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_STAGING }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_STAGING }}

      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_STAGING }}/adyela/adyela-web-staging
          tags: |
            type=raw,value=${{ inputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/web/Dockerfile
          push: true
          load: true
          target: production
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          no-cache: true
          build-args: |
            VITE_API_URL=${{ secrets.VITE_API_URL_STAGING }}
            VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }}
            VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }}
            VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
            VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
            VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
            VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }}
            VITE_JITSI_DOMAIN=meet.jit.si
            VITE_ENV=${{ env.ENVIRONMENT }}

      - name: Inspect Image Internals
        run: |
          IMAGE_NAME=${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_STAGING }}/adyela/adyela-web-staging:${{ inputs.version }}
          echo "--- Inspeccionando imagen: ${IMAGE_NAME} ---"

          echo "\n>> Verificando contenido de /etc/nginx/nginx.conf (buscando la directiva 'pid')"
          docker run --rm --entrypoint cat ${IMAGE_NAME} /etc/nginx/nginx.conf | grep pid || echo "Directiva 'pid' no encontrada o usa el valor por defecto."

          echo "\n>> Listando permisos de /run"
          docker run --rm --entrypoint ls ${IMAGE_NAME} -la /run

      - name: Output image version
        id: output
        run: |
          echo "image-version=${{ inputs.version }}" >> "$GITHUB_OUTPUT"

  deploy-web:
    name: Deploy Web to Cloud Run
    runs-on: ubuntu-latest
    needs: [build-web]
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    outputs:
      web-url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: "main"

      - name: Reset to specific commit
        run: git reset --hard ${{ inputs.version }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_STAGING }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_STAGING }}

      - name: Setup GCP SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Build image reference
        id: image
        run: |
          # Construct full image reference from version + project secret
          REGISTRY="${{ env.GCP_REGION }}-docker.pkg.dev"
          PROJECT="${{ secrets.GCP_PROJECT_ID_STAGING }}"
          REPOSITORY="adyela"
          SERVICE="adyela-web-staging"
          VERSION="${{ needs.build-web.outputs.image-version }}"
          IMAGE="${REGISTRY}/${PROJECT}/${REPOSITORY}/${SERVICE}:${VERSION}"
          echo "image=${IMAGE}" >> "$GITHUB_OUTPUT"
          echo "Full image reference: ${IMAGE}"

      - name: Deploy to Cloud Run
        id: deploy
        run: |
          # Convert version to GCP-compliant label (replace dots with dashes)
          VERSION_LABEL=$(echo "${{ inputs.version }}" | tr '.' '-')

          gcloud run deploy adyela-web-staging \
            --image ${{ steps.image.outputs.image }} \
            --region ${{ env.GCP_REGION }} \
            --platform managed \
            --set-env-vars="VITE_ENV=${{ env.ENVIRONMENT }},VERSION=${{ inputs.version }}" \
            --min-instances=0 \
            --max-instances=2 \
            --memory=256Mi \
            --cpu=1 \
            --timeout=60s \
            --concurrency=80 \
            --port=8080 \
            --service-account=${{ secrets.SERVICE_ACCOUNT_STAGING }} \
            --labels="environment=staging,version=${VERSION_LABEL},deployed-by=github-actions" \
            --format=json | jq -r '.status.url' | tee /tmp/url.txt

          # Store URL as output
          URL=$(cat /tmp/url.txt)
          echo "url=${URL}" >> "$GITHUB_OUTPUT"
          echo "Web deployed to: ${URL}"

      - name: Verify deployment health
        continue-on-error: true
        run: |
          MAX_RETRIES=5
          RETRY_COUNT=0

          # Get identity token for authenticated requests
          TOKEN=$(gcloud auth print-identity-token)

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -f -H "Authorization: Bearer $TOKEN" ${{ steps.deploy.outputs.url }}/health; then
              echo "Health check passed"
              exit 0
            fi

            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "Health check failed. Retry $RETRY_COUNT/$MAX_RETRIES"
            sleep 10
          done

          echo "Health check failed after $MAX_RETRIES retries"
          exit 1

  e2e-tests:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-web]
    if: ${{ !inputs.skip_e2e }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: "main"

      - name: Reset to specific commit
        run: git reset --hard ${{ inputs.version }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.0

      - name: Install dependencies
        run: |
          if [ -f "tests/e2e/package.json" ]; then
            cd tests/e2e
            pnpm install --frozen-lockfile
          fi

      - name: Install Playwright browsers
        run: |
          if [ -f "tests/e2e/package.json" ]; then
            cd tests/e2e
            pnpm exec playwright install --with-deps
          fi

      - name: Run E2E tests
        run: |
          if [ -f "tests/e2e/package.json" ]; then
            cd tests/e2e
            pnpm exec playwright test
          else
            echo "No E2E tests found, skipping..."
          fi
        env:
          BASE_URL: https://staging.adyela.care
          API_URL: ${{ needs.deploy-api.outputs.api-url }}

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            tests/e2e/playwright-report/
            tests/e2e/test-results/
          retention-days: 7

  performance-tests:
    name: Run Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-web]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: "main"

      - name: Reset to specific commit
        run: git reset --hard ${{ inputs.version }}

      - name: Check if performance tests exist
        id: check-perf-tests
        run: |
          if [ -f "tests/performance/load-test.js" ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "Performance tests not found, skipping..."
          fi

      - name: Run k6 load tests
        if: steps.check-perf-tests.outputs.exists == 'true'
        uses: grafana/k6-action@v0.3.1
        with:
          filename: tests/performance/load-test.js
        env:
          K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}
          API_BASE_URL: ${{ needs.deploy-api.outputs.api-url }}

      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-results
          path: k6-results.json
          retention-days: 7

  security-scan:
    name: Security Scan (Deployed)
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-web]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: "main"

      - name: Reset to specific commit
        run: git reset --hard ${{ inputs.version }}

      - name: Check if ZAP rules exist
        id: check-zap-rules
        run: |
          if [ -f ".zap/rules.tsv" ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "ZAP rules not found, using default rules..."
          fi

      - name: Run OWASP ZAP scan (with custom rules)
        if: steps.check-zap-rules.outputs.exists == 'true'
        continue-on-error: true
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          target: https://staging.adyela.care
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a"
          fail_action: false

      - name: Run OWASP ZAP scan (default rules)
        if: steps.check-zap-rules.outputs.exists == 'false'
        continue-on-error: true
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          target: https://staging.adyela.care
          cmd_options: "-a"
          fail_action: false

      - name: Upload ZAP scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan
          path: report_html.html
          retention-days: 30

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-web, e2e-tests, performance-tests, security-scan]
    if: always()
    steps:
      - name: Send Slack notification
        continue-on-error: true
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "Staging Deployment ${{ needs.e2e-tests.result == 'success' && '✅ Successful' || '❌ Failed' }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Staging Deployment*\n${{ needs.e2e-tests.result == 'success' && ':white_check_mark: Successful' || ':x: Failed' }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Version:*\n${{ inputs.version }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*API:*\n${{ needs.deploy-api.outputs.api-url }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Web:*\n${{ needs.deploy-web.outputs.web-url }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Triggered by:*\n${{ github.actor }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Test Results:*\n• E2E Tests: ${{ needs.e2e-tests.result }}\n• Performance: ${{ needs.performance-tests.result }}\n• Security: ${{ needs.security-scan.result }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-web, e2e-tests, performance-tests, security-scan]
    if: always()
    steps:
      - name: Check deployment results
        run: |
          echo "Deploy API: ${{ needs.deploy-api.result }}"
          echo "Deploy Web: ${{ needs.deploy-web.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Performance Tests: ${{ needs.performance-tests.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"

      - name: Fail if critical jobs failed
        if: |
          needs.deploy-api.result == 'failure' ||
          needs.deploy-web.result == 'failure' ||
          needs.e2e-tests.result == 'failure'
        run: exit 1
