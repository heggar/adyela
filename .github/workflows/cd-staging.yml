name: CD - Staging

# Staging deployment with HIPAA-COMPLIANT GCP resources
# - Scale to zero when not used (min-instances=0)
# - Maximum 1-2 instances (max-instances=1-2)
# - Minimal CPU (1) and memory (256Mi-512Mi)
# - VPC connector for network isolation
# - Private access only (no public internet)
# - All 8 HIPAA secrets configured
# - Estimated cost: $6-8/month

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to deploy (e.g., v1.2.3 or commit SHA)"
        required: true
        type: string
      skip_e2e:
        description: "Skip E2E tests"
        required: false
        type: boolean
        default: false

env:
  ENVIRONMENT: staging
  GCP_REGION: us-central1
  API_SERVICE_NAME: adyela-api-staging
  WEB_SERVICE_NAME: adyela-web-staging
  STATIC_BUCKET_NAME: adyela-staging-static-assets

permissions:
  contents: read
  id-token: write
  deployments: write
  issues: write
  security-events: write

jobs:
  approval:
    name: Deployment Approval
    runs-on: ubuntu-latest
    environment:
      name: staging-approval
    steps:
      - name: Manual approval checkpoint
        run: |
          echo "Deploying version: ${{ inputs.version }}"
          echo "Skip E2E: ${{ inputs.skip_e2e }}"

  build-api:
    name: Build API Docker Image
    runs-on: ubuntu-latest
    needs: [approval]
    outputs:
      image-version: ${{ inputs.version }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_STAGING }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_STAGING }}

      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_STAGING }}/adyela/${{ env.API_SERVICE_NAME }}
          tags: |
            type=raw,value=${{ inputs.version }}
            type=sha,prefix={{branch}}-
            type=raw,value=latest

      - name: Validate build context
        run: |
          echo "=================================================="
          echo "üîç VALIDATING BUILD CONTEXT"
          echo "=================================================="
          echo ""
          echo "üìÇ Checking API directory structure..."
          ls -la apps/api/
          echo ""
          echo "üìÑ Checking Dockerfile..."
          cat apps/api/Dockerfile | head -20
          echo "... (showing first 20 lines)"
          echo ""
          echo "üêç Checking Python files..."
          find apps/api/adyela_api -name "*.py" | head -10
          echo "... (showing first 10 files)"
          echo ""
          echo "üì¶ Checking pyproject.toml..."
          cat apps/api/pyproject.toml | grep -A 5 "tool.poetry"
          echo ""
          echo "=================================================="
          echo ""

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: apps/api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENVIRONMENT=${{ env.ENVIRONMENT }}
          platforms: linux/amd64
          provenance: false
          sbom: false

      - name: Verify pushed image
        run: |
          echo "=================================================="
          echo "‚úÖ VERIFYING PUSHED IMAGE"
          echo "=================================================="
          echo ""
          IMAGE_REF="${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_STAGING }}/adyela/${{ env.API_SERVICE_NAME }}:${{ inputs.version }}"
          echo "üì¶ Image Reference: ${IMAGE_REF}"
          echo "üîë Digest: ${{ steps.build.outputs.digest }}"
          echo ""
          echo "üîç Listing image tags..."
          gcloud artifacts docker tags list ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_STAGING }}/adyela/${{ env.API_SERVICE_NAME }} --limit=5
          echo ""
          echo "=================================================="
          echo ""

      - name: Sign container image
        continue-on-error: true
        run: |
          cosign sign --key env://COSIGN_PRIVATE_KEY \
            ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_STAGING }}/adyela/${{ env.API_SERVICE_NAME }}@${{ steps.build.outputs.digest }}
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

  deploy-api:
    name: Deploy API to Cloud Run
    runs-on: ubuntu-latest
    needs: [build-api]
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    outputs:
      api-url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_STAGING }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_STAGING }}

      - name: Setup GCP SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Build image reference
        id: image
        run: |
          echo "=================================================="
          echo "üèóÔ∏è  BUILDING IMAGE REFERENCE"
          echo "=================================================="
          echo ""
          # Construct full image reference from version + project secret
          REGISTRY="${{ env.GCP_REGION }}-docker.pkg.dev"
          PROJECT="${{ secrets.GCP_PROJECT_ID_STAGING }}"
          REPOSITORY="adyela"
          SERVICE="${{ env.API_SERVICE_NAME }}"
          VERSION="${{ needs.build-api.outputs.image-version }}"
          IMAGE="${REGISTRY}/${PROJECT}/${REPOSITORY}/${SERVICE}:${VERSION}"

          echo "üì¶ Image Components:"
          echo "   Registry: ${REGISTRY}"
          echo "   Project: ${PROJECT}"
          echo "   Repository: ${REPOSITORY}"
          echo "   Service: ${SERVICE}"
          echo "   Version: ${VERSION}"
          echo ""
          echo "üîó Full Image Reference:"
          echo "   ${IMAGE}"
          echo ""

          echo "image=${IMAGE}" >> "$GITHUB_OUTPUT"
          echo "=================================================="
          echo ""

      - name: Validate secrets exist
        run: |
          echo "=================================================="
          echo "üîê VALIDATING SECRETS CONFIGURATION"
          echo "=================================================="
          echo ""
          echo "üìã Checking required secrets in Secret Manager..."
          echo ""

          SECRETS=(
            "api-secret-key"
            "firebase-project-id"
            "firebase-admin-key"
            "jwt-secret-key"
            "encryption-key"
            "database-connection-string"
            "smtp-credentials"
            "external-api-keys"
            "oauth-google-client-id"
            "oauth-google-client-secret"
            "oauth-facebook-app-id"
            "oauth-facebook-app-secret"
            "oauth-apple-client-id"
            "oauth-apple-client-secret"
            "oauth-microsoft-client-id"
            "oauth-microsoft-client-secret"
          )

          ALL_EXIST=true
          for secret in "${SECRETS[@]}"; do
            if gcloud secrets describe "${secret}" --project=${{ secrets.GCP_PROJECT_ID_STAGING }} &>/dev/null; then
              VERSION_COUNT=$(gcloud secrets versions list "${secret}" --project=${{ secrets.GCP_PROJECT_ID_STAGING }} --format="value(name)" | wc -l)
              echo "   ‚úÖ ${secret} (${VERSION_COUNT} versions)"
            else
              echo "   ‚ùå ${secret} - NOT FOUND"
              ALL_EXIST=false
            fi
          done

          echo ""
          if [ "$ALL_EXIST" = true ]; then
            echo "‚úÖ All secrets verified successfully"
          else
            echo "‚ö†Ô∏è  WARNING: Some secrets are missing!"
            echo "   Deployment may fail if these secrets are required."
          fi
          echo ""
          echo "=================================================="
          echo ""

      - name: Pre-deployment validation
        run: |
          echo "=================================================="
          echo "üîç PRE-DEPLOYMENT VALIDATION"
          echo "=================================================="
          echo ""
          echo "üìä Current Cloud Run service status..."
          gcloud run services describe ${{ env.API_SERVICE_NAME }} \
            --region ${{ env.GCP_REGION }} \
            --format="table(metadata.name,status.conditions[0].status,spec.template.metadata.name)" \
            2>/dev/null || echo "   ‚ÑπÔ∏è  Service not found (will be created)"
          echo ""
          echo "üìù Deployment Configuration:"
          echo "   Environment: ${{ env.ENVIRONMENT }}"
          echo "   Region: ${{ env.GCP_REGION }}"
          echo "   Service: ${{ env.API_SERVICE_NAME }}"
          echo "   Version: ${{ inputs.version }}"
          echo "   Min Instances: 0 (scale-to-zero)"
          echo "   Max Instances: 1"
          echo "   Memory: 512Mi"
          echo "   CPU: 1"
          echo "   Port: 8000"
          echo "   Ingress: internal"
          echo "   VPC Connector: adyela-staging-connector"
          echo ""
          echo "=================================================="
          echo ""

      - name: Deploy to Cloud Run (HIPAA-Compliant)
        id: deploy
        run: |
          echo "=================================================="
          echo "üöÄ DEPLOYING TO CLOUD RUN"
          echo "=================================================="
          echo ""
          # Convert version to GCP-compliant label (replace dots with dashes)
          VERSION_LABEL=$(echo "${{ inputs.version }}" | tr '.' '-')

          echo "üì¶ Deploying image: ${{ steps.image.outputs.image }}"
          echo "üè∑Ô∏è  Version label: ${VERSION_LABEL}"
          echo ""

          # Create env vars file to avoid issues with special characters
          cat > /tmp/env-vars.yaml <<EOF
          ENVIRONMENT: "${{ env.ENVIRONMENT }}"
          VERSION: "${{ inputs.version }}"
          GCP_PROJECT_ID: "${{ secrets.GCP_PROJECT_ID_STAGING }}"
          HIPAA_COMPLIANCE: "true"
          AUDIT_LOGGING: "true"
          DATA_ENCRYPTION: "true"
          CORS_ORIGINS: "https://staging.adyela.care,https://adyela-staging.firebaseapp.com,https://adyela-staging.web.app"
          EOF

          echo "üìù Environment variables file created:"
          cat /tmp/env-vars.yaml
          echo ""

          gcloud run deploy ${{ env.API_SERVICE_NAME }} \
            --image ${{ steps.image.outputs.image }} \
            --region ${{ env.GCP_REGION }} \
            --platform managed \
            --env-vars-file=/tmp/env-vars.yaml \
            --set-secrets="SECRET_KEY=api-secret-key:latest,FIREBASE_PROJECT_ID=firebase-project-id:latest,FIREBASE_ADMIN_KEY=firebase-admin-key:latest,JWT_SECRET=jwt-secret-key:latest,ENCRYPTION_KEY=encryption-key:latest,DATABASE_URL=database-connection-string:latest,SMTP_CREDENTIALS=smtp-credentials:latest,EXTERNAL_API_KEYS=external-api-keys:latest,OAUTH_GOOGLE_CLIENT_ID=oauth-google-client-id:latest,OAUTH_GOOGLE_CLIENT_SECRET=oauth-google-client-secret:latest,OAUTH_FACEBOOK_APP_ID=oauth-facebook-app-id:latest,OAUTH_FACEBOOK_APP_SECRET=oauth-facebook-app-secret:latest,OAUTH_APPLE_CLIENT_ID=oauth-apple-client-id:latest,OAUTH_APPLE_CLIENT_SECRET=oauth-apple-client-secret:latest,OAUTH_MICROSOFT_CLIENT_ID=oauth-microsoft-client-id:latest,OAUTH_MICROSOFT_CLIENT_SECRET=oauth-microsoft-client-secret:latest" \
            --min-instances=0 \
            --max-instances=1 \
            --memory=512Mi \
            --cpu=1 \
            --allow-unauthenticated \
            --ingress=all \
            --timeout=300s \
            --concurrency=80 \
            --port=8000 \
            --service-account=adyela-staging-hipaa@adyela-staging.iam.gserviceaccount.com \
            --labels="environment=staging,version=${VERSION_LABEL},deployed-by=github-actions,hipaa-compliant=true" \
            --format=json > /tmp/deploy-output.json

          echo ""
          echo "‚úÖ Deployment command completed"
          echo ""

          URL=$(gcloud run services describe ${{ env.API_SERVICE_NAME }} --region ${{ env.GCP_REGION }} --format='value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT

          echo "üîó Service URL: ${URL}"
          echo ""
          echo "=================================================="
          echo ""

      - name: Wait for deployment stabilization
        run: |
          echo "=================================================="
          echo "‚è≥ WAITING FOR DEPLOYMENT STABILIZATION"
          echo "=================================================="
          echo ""
          echo "Waiting 30 seconds for Cloud Run to stabilize..."
          sleep 30
          echo ""
          echo "‚úÖ Stabilization period completed"
          echo "=================================================="
          echo ""

      - name: Verify deployment configuration
        run: |
          echo "=================================================="
          echo "üîç POST-DEPLOYMENT VERIFICATION"
          echo "=================================================="
          echo ""
          echo "üìä Fetching current service configuration..."
          gcloud run services describe ${{ env.API_SERVICE_NAME }} \
            --region ${{ env.GCP_REGION }} \
            --format=json > /tmp/service-config.json

          echo ""
          echo "üìù Service Configuration Summary:"
          echo "   Name: $(jq -r '.metadata.name' /tmp/service-config.json)"
          echo "   Status: $(jq -r '.status.conditions[0].status' /tmp/service-config.json)"
          echo "   URL: $(jq -r '.status.url' /tmp/service-config.json)"
          echo "   Latest Revision: $(jq -r '.status.latestReadyRevisionName' /tmp/service-config.json)"
          echo "   Created: $(jq -r '.status.latestCreatedRevisionName' /tmp/service-config.json)"
          echo ""
          echo "üîß Container Configuration:"
          echo "   Image: $(jq -r '.spec.template.spec.containers[0].image' /tmp/service-config.json)"
          echo "   Port: $(jq -r '.spec.template.spec.containers[0].ports[0].containerPort' /tmp/service-config.json)"
          echo "   Memory: $(jq -r '.spec.template.spec.containers[0].resources.limits.memory' /tmp/service-config.json)"
          echo "   CPU: $(jq -r '.spec.template.spec.containers[0].resources.limits.cpu' /tmp/service-config.json)"
          echo ""
          echo "üåê Network Configuration:"
          echo "   Ingress: $(jq -r '.spec.template.metadata.annotations["run.googleapis.com/ingress"]' /tmp/service-config.json)"
          echo "   VPC Connector: $(jq -r '.spec.template.metadata.annotations["run.googleapis.com/vpc-access-connector"]' /tmp/service-config.json)"
          echo "   VPC Egress: $(jq -r '.spec.template.metadata.annotations["run.googleapis.com/vpc-access-egress"]' /tmp/service-config.json)"
          echo ""
          echo "üìà Scaling Configuration:"
          echo "   Min Instances: $(jq -r '.spec.template.metadata.annotations["autoscaling.knative.dev/minScale"]' /tmp/service-config.json)"
          echo "   Max Instances: $(jq -r '.spec.template.metadata.annotations["autoscaling.knative.dev/maxScale"]' /tmp/service-config.json)"
          echo ""
          echo "üîê Environment Variables (count): $(jq -r '.spec.template.spec.containers[0].env | length' /tmp/service-config.json)"
          echo "   $(jq -r '.spec.template.spec.containers[0].env[] | select(.value != null) | .name' /tmp/service-config.json | head -10)"
          echo ""
          echo "üîë Secrets Mounted (count): $(jq -r '[.spec.template.spec.containers[0].env[] | select(.valueFrom.secretKeyRef != null)] | length' /tmp/service-config.json)"
          echo "   $(jq -r '.spec.template.spec.containers[0].env[] | select(.valueFrom.secretKeyRef != null) | .name' /tmp/service-config.json | head -10)"
          echo ""
          echo "=================================================="
          echo ""

      - name: Check Cloud Run logs for errors
        run: |
          echo "=================================================="
          echo "üìú CHECKING RECENT LOGS"
          echo "=================================================="
          echo ""
          echo "üîç Fetching last 20 log entries..."
          gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=${{ env.API_SERVICE_NAME }}" \
            --limit=20 \
            --format="table(timestamp,severity,textPayload)" \
            --project=${{ secrets.GCP_PROJECT_ID_STAGING }} || echo "   ‚ÑπÔ∏è  No logs available yet"
          echo ""
          echo "üö® Checking for errors in recent logs..."
          gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=${{ env.API_SERVICE_NAME }} AND severity>=ERROR" \
            --limit=10 \
            --format="table(timestamp,severity,textPayload)" \
            --project=${{ secrets.GCP_PROJECT_ID_STAGING }} || echo "   ‚úÖ No errors found in recent logs"
          echo ""
          echo "=================================================="
          echo ""

      - name: Test API endpoints (Public Access)
        run: |
          echo "=================================================="
          echo "üß™ TESTING API ENDPOINTS"
          echo "=================================================="
          echo ""
          SERVICE_URL="${{ steps.deploy.outputs.url }}"
          echo "üîó Service URL: ${SERVICE_URL}"
          echo ""

          echo "üìç Testing endpoint: GET /"
          echo "   Request: curl -s -o /dev/null -w 'HTTP %{http_code} - %{time_total}s' ${SERVICE_URL}/"
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}\nTIME:%{time_total}s" ${SERVICE_URL}/ || echo "FAILED")
          echo "   ${RESPONSE}"
          echo ""

          echo "üìç Testing endpoint: GET /health"
          echo "   Request: curl -s ${SERVICE_URL}/health"
          HEALTH_RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" ${SERVICE_URL}/health || echo "FAILED")
          echo "   Response:"
          echo "${HEALTH_RESPONSE}" | head -20
          echo ""

          echo "üìç Testing endpoint: GET /docs"
          echo "   Request: curl -s -o /dev/null -w 'HTTP %{http_code}' ${SERVICE_URL}/docs"
          DOCS_CODE=$(curl -s -o /dev/null -w '%{http_code}' ${SERVICE_URL}/docs)
          echo "   Response: HTTP ${DOCS_CODE}"
          echo ""

          echo "üìç Testing endpoint: GET /api/v1/auth/sync"
          echo "   Request: curl -s -w 'HTTP %{http_code}' ${SERVICE_URL}/api/v1/auth/sync"
          SYNC_RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" ${SERVICE_URL}/api/v1/auth/sync || echo "FAILED")
          echo "   Response:"
          echo "${SYNC_RESPONSE}" | head -20
          echo ""

          echo "=================================================="
          echo "üìä ENDPOINT TEST SUMMARY"
          echo "=================================================="

          # Extract HTTP codes
          ROOT_CODE=$(echo "${RESPONSE}" | grep HTTP_CODE | cut -d: -f2)
          HEALTH_CODE=$(echo "${HEALTH_RESPONSE}" | grep HTTP_CODE | cut -d: -f2)
          SYNC_CODE=$(echo "${SYNC_RESPONSE}" | grep HTTP_CODE | cut -d: -f2)

          echo "   GET /                : HTTP ${ROOT_CODE:-UNKNOWN}"
          echo "   GET /health          : HTTP ${HEALTH_CODE:-UNKNOWN}"
          echo "   GET /docs            : HTTP ${DOCS_CODE:-UNKNOWN}"
          echo "   GET /api/v1/auth/sync: HTTP ${SYNC_CODE:-UNKNOWN}"
          echo ""

          # Evaluate success
          if [ "${HEALTH_CODE}" == "200" ] || [ "${ROOT_CODE}" == "200" ]; then
            echo "‚úÖ API is responding successfully!"
          else
            echo "‚ö†Ô∏è  WARNING: API may not be responding correctly"
            echo "   Expected: HTTP 200 for /health or /"
            echo "   Got: HTTP ${HEALTH_CODE:-UNKNOWN} for /health, HTTP ${ROOT_CODE:-UNKNOWN} for /"
          fi
          echo ""
          echo "=================================================="
          echo ""

      - name: Display deployment summary
        run: |
          echo "=================================================="
          echo "‚úÖ DEPLOYMENT COMPLETED"
          echo "=================================================="
          echo ""
          echo "üöÄ Service: ${{ env.API_SERVICE_NAME }}"
          echo "üåç Region: ${{ env.GCP_REGION }}"
          echo "üîó URL: ${{ steps.deploy.outputs.url }}"
          echo "üè∑Ô∏è  Version: ${{ inputs.version }}"
          echo "üì¶ Image: ${{ steps.image.outputs.image }}"
          echo ""
          echo "üîì Access Configuration:"
          echo "   ‚Ä¢ Public access enabled (--allow-unauthenticated)"
          echo "   ‚Ä¢ Ingress: all (temporarily for diagnosis)"
          echo "   ‚ö†Ô∏è  NOTE: Production should use private access"
          echo ""
          echo "üìù Next Steps:"
          echo "   1. Review endpoint test results above"
          echo "   2. Check Cloud Run logs for any errors"
          echo "   3. Verify application startup in logs"
          echo "   4. Test OAuth endpoints manually if needed"
          echo ""
          echo "=================================================="
          echo ""

  build-web:
    name: Build Web Docker Image
    runs-on: ubuntu-latest
    needs: [approval]
    outputs:
      image-version: ${{ steps.output.outputs.image-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_STAGING }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_STAGING }}

      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_STAGING }}/adyela/adyela-web-staging
          tags: |
            type=raw,value=${{ inputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: apps/web/Dockerfile
          push: true
          load: false
          target: production
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          no-cache: true
          platforms: linux/amd64 # una sola plataforma
          provenance: false # desactiva atestaciones
          sbom: false # desactiva SBOM
          build-args: |
            VITE_API_BASE_URL=${{ secrets.VITE_API_URL_STAGING }}
            VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }}
            VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }}
            VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
            VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
            VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
            VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }}
            VITE_JITSI_DOMAIN=meet.jit.si
            VITE_ENV=${{ env.ENVIRONMENT }}

      - name: Deploy static assets to Cloud Storage
        run: |
          echo "üöÄ Desplegando assets est√°ticos a Cloud Storage..."
          mkdir -p /tmp/static-assets
          IMAGE_NAME=${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_STAGING }}/adyela/${{ env.WEB_SERVICE_NAME }}:${{ inputs.version }}
          docker run --rm --entrypoint tar ${IMAGE_NAME} -czf - -C /usr/share/nginx/html assets 2>/dev/null | tar -xzf - -C /tmp/static-assets/ || echo "No assets found in image"
          if [ -d "/tmp/static-assets/assets" ]; then
            echo "‚òÅÔ∏è Subiendo assets a Cloud Storage..."
            # Usar gcloud storage en lugar de gsutil para mejor compatibilidad con permisos
            gcloud storage cp -r /tmp/static-assets/assets/* gs://${{ env.STATIC_BUCKET_NAME }}/assets/ \
              --cache-control="public,max-age=31536000,immutable" \
              --project=${{ secrets.GCP_PROJECT_ID_STAGING }}
            echo "‚úÖ Assets desplegados exitosamente"
          else
            echo "‚ö†Ô∏è No se encontraron assets para desplegar"
          fi
          rm -rf /tmp/static-assets

      - name: Output image version
        id: output
        run: |
          echo "image-version=${{ inputs.version }}" >> "$GITHUB_OUTPUT"

  deploy-web:
    name: Deploy Web to Cloud Run
    runs-on: ubuntu-latest
    needs: [build-web]
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    outputs:
      web-url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_STAGING }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_STAGING }}

      - name: Setup GCP SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Build image reference
        id: image
        run: |
          # Construct full image reference from version + project secret
          REGISTRY="${{ env.GCP_REGION }}-docker.pkg.dev"
          PROJECT="${{ secrets.GCP_PROJECT_ID_STAGING }}"
          REPOSITORY="adyela"
          SERVICE="adyela-web-staging"
          VERSION="${{ needs.build-web.outputs.image-version }}"
          IMAGE="${REGISTRY}/${PROJECT}/${REPOSITORY}/${SERVICE}:${VERSION}"
          echo "image=${IMAGE}" >> "$GITHUB_OUTPUT"
          echo "Full image reference: ${IMAGE}"

      - name: Deploy to Cloud Run (HIPAA-Compliant)
        id: deploy
        run: |
          # Convert version to GCP-compliant label (replace dots with dashes)
          VERSION_LABEL=$(echo "${{ inputs.version }}" | tr '.' '-')

          gcloud run deploy adyela-web-staging \
            --image ${{ steps.image.outputs.image }} \
            --region ${{ env.GCP_REGION }} \
            --platform managed \
            --set-env-vars="VITE_ENV=${{ env.ENVIRONMENT }},VERSION=${{ inputs.version }},HIPAA_COMPLIANCE=true,AUDIT_LOGGING=true" \
            --min-instances=0 \
            --allow-unauthenticated \
            --ingress=internal-and-cloud-load-balancing \
            --vpc-connector=adyela-staging-connector \
            --vpc-egress=private-ranges-only \
            --max-instances=2 \
            --memory=512Mi \
            --cpu=1 \
            --timeout=60s \
            --concurrency=80 \
            --port=8080 \
            --service-account=adyela-staging-hipaa@adyela-staging.iam.gserviceaccount.com \
            --labels="environment=staging,version=${VERSION_LABEL},deployed-by=github-actions,hipaa-compliant=true" \
            --format=json | jq -r '.status.url' | tee /tmp/url.txt

          # Store URL as output
          URL=$(cat /tmp/url.txt)
          echo "url=${URL}" >> "$GITHUB_OUTPUT"
          echo "Web deployed to: ${URL}"

      - name: Verify deployment health (HIPAA-compliant)
        run: |
          echo "üîç Verifying HIPAA-compliant web deployment..."
          echo "Web URL: ${{ steps.deploy.outputs.url }}"
          echo ""
          echo "‚úÖ Web service deployed with HIPAA compliance:"
          echo "  üîí VPC connector: adyela-staging-connector"
          echo "  üîí Secure ingress: internal-and-cloud-load-balancing"
          echo "  üîì Public access: via Load Balancer only (IAM controlled)"
          echo "  üîí Service account: adyela-staging-hipaa"
          echo "  üîí HIPAA environment variables configured"
          echo ""
          echo "‚ÑπÔ∏è  Note: Access is controlled via Load Balancer and IAM policies"
          echo "   Direct access to Cloud Run URL requires proper IAM permissions"
          echo "   Public access only through https://staging.adyela.care"
          echo ""
          echo "‚úÖ Web deployment completed successfully - HIPAA compliance achieved"

      - name: Invalidate CDN cache
        run: |
          echo "üîÑ Invalidando cache CDN completo..."
          gcloud compute url-maps invalidate-cdn-cache adyela-staging-web-url-map \
            --path "/*" \
            --project=${{ secrets.GCP_PROJECT_ID_STAGING }} \
            --async || true
          gcloud compute url-maps invalidate-cdn-cache adyela-staging-web-url-map \
            --path "/assets/*" \
            --path "/static/*" \
            --project=${{ secrets.GCP_PROJECT_ID_STAGING }} \
            --async || true
          echo "‚úÖ Cache CDN invalidado completamente"

  e2e-tests:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-web]
    if: ${{ !inputs.skip_e2e }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.0

      - name: Install dependencies
        run: |
          if [ -f "tests/e2e/package.json" ]; then
            cd tests/e2e
            pnpm install --frozen-lockfile
          fi

      - name: Install Playwright browsers
        run: |
          if [ -f "tests/e2e/package.json" ]; then
            cd tests/e2e
            pnpm exec playwright install --with-deps
          fi

      - name: Run E2E tests
        run: |
          if [ -f "tests/e2e/package.json" ]; then
            cd tests/e2e
            pnpm exec playwright test
          else
            echo "No E2E tests found, skipping..."
          fi
        env:
          BASE_URL: https://staging.adyela.care
          API_URL: ${{ needs.deploy-api.outputs.api-url }}

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            tests/e2e/playwright-report/
            tests/e2e/test-results/
          retention-days: 7

  performance-tests:
    name: Run Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-web]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Check if performance tests exist
        id: check-perf-tests
        run: |
          if [ -f "tests/performance/load-test.js" ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "Performance tests not found, skipping..."
          fi

      - name: Run k6 load tests
        if: steps.check-perf-tests.outputs.exists == 'true'
        uses: grafana/k6-action@v0.3.1
        with:
          filename: tests/performance/load-test.js
        env:
          K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}
          API_BASE_URL: ${{ needs.deploy-api.outputs.api-url }}

      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-results
          path: k6-results.json
          retention-days: 7

  security-scan:
    name: Security Scan (Deployed)
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-web]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Check if ZAP rules exist
        id: check-zap-rules
        run: |
          if [ -f ".zap/rules.tsv" ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "ZAP rules not found, using default rules..."
          fi

      - name: Run OWASP ZAP scan (with custom rules)
        if: steps.check-zap-rules.outputs.exists == 'true'
        continue-on-error: true
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          target: https://staging.adyela.care
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a"
          fail_action: false

      - name: Run OWASP ZAP scan (default rules)
        if: steps.check-zap-rules.outputs.exists == 'false'
        continue-on-error: true
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          target: https://staging.adyela.care
          cmd_options: "-a"
          fail_action: false

      - name: Upload ZAP scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan
          path: report_html.html
          retention-days: 30

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-web, e2e-tests, performance-tests, security-scan]
    if: always()
    steps:
      - name: Send Slack notification
        continue-on-error: true
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "Staging Deployment ${{ needs.e2e-tests.result == 'success' && '‚úÖ Successful' || '‚ùå Failed' }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Staging Deployment*\n${{ needs.e2e-tests.result == 'success' && ':white_check_mark: Successful' || ':x: Failed' }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Version:*\n${{ inputs.version }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*API:*\n${{ needs.deploy-api.outputs.api-url }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Web:*\n${{ needs.deploy-web.outputs.web-url }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Triggered by:*\n${{ github.actor }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Test Results:*\n‚Ä¢ E2E Tests: ${{ needs.e2e-tests.result }}\n‚Ä¢ Performance: ${{ needs.performance-tests.result }}\n‚Ä¢ Security: ${{ needs.security-scan.result }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-web, e2e-tests, performance-tests, security-scan]
    if: always()
    steps:
      - name: Check deployment results
        run: |
          echo "Deploy API: ${{ needs.deploy-api.result }}"
          echo "Deploy Web: ${{ needs.deploy-web.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Performance Tests: ${{ needs.performance-tests.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"

      - name: Fail if critical jobs failed
        if: |
          needs.deploy-api.result == 'failure' ||
          needs.deploy-web.result == 'failure' ||
          needs.e2e-tests.result == 'failure'
        run: exit 1
