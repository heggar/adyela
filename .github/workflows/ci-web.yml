name: CI - Web Frontend

on:
  pull_request:
    paths:
      - "apps/web/**"
      - "pnpm-lock.yaml"
      - ".github/workflows/ci-web.yml"
  push:
    branches:
      - main
      - develop
    paths:
      - "apps/web/**"
      - "pnpm-lock.yaml"
      - ".github/workflows/ci-web.yml"

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "9"
  WORKING_DIR: apps/web

jobs:
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        working-directory: ${{ env.WORKING_DIR }}
        run: pnpm lint

      - name: Run Prettier check
        working-directory: ${{ env.WORKING_DIR }}
        run: pnpm exec prettier --check "src/**/*.{ts,tsx,js,jsx,json,css}"

  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run TypeScript type check
        working-directory: ${{ env.WORKING_DIR }}
        run: pnpm type-check

  test:
    name: Tests & Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests with coverage
        working-directory: ${{ env.WORKING_DIR }}
        run: pnpm test:coverage --run
        env:
          VITE_API_URL: http://localhost:8000
          VITE_FIREBASE_API_KEY: test-api-key
          VITE_FIREBASE_PROJECT_ID: test-project
          VITE_FIREBASE_AUTH_DOMAIN: test.firebaseapp.com
          VITE_FIREBASE_STORAGE_BUCKET: test.appspot.com
          VITE_FIREBASE_MESSAGING_SENDER_ID: test-sender-id
          VITE_FIREBASE_APP_ID: test-app-id

      # TODO: Re-enable when tests are added
      # - name: Check coverage threshold
      #   working-directory: ${{ env.WORKING_DIR }}
      #   run: |
      #     # Extract coverage percentage from coverage report
      #     COVERAGE=$(pnpm exec nyc report --reporter=text-summary | grep 'Statements' | awk '{print $3}' | sed 's/%//')
      #     echo "Coverage: $COVERAGE%"
      #     if (( $(echo "$COVERAGE < 70" | bc -l) )); then
      #       echo "Coverage ($COVERAGE%) is below minimum threshold (70%)"
      #       exit 1
      #     fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ${{ env.WORKING_DIR }}/coverage/coverage-final.json
          flags: web
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: web-test-results
          path: ${{ env.WORKING_DIR }}/coverage/
          retention-days: 7

  build:
    name: Production Build
    runs-on: ubuntu-latest
    needs: [lint, type-check, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        working-directory: ${{ env.WORKING_DIR }}
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_JITSI_DOMAIN: meet.jit.si
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: ${{ env.WORKING_DIR }}/dist
          retention-days: 7

  bundle-analysis:
    name: Bundle Size Check
    runs-on: ubuntu-latest
    needs: [build]
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: ${{ env.WORKING_DIR }}/dist

      - name: Check bundle size limits
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          # Main bundle should be < 500KB
          MAIN_SIZE=$(du -k dist/assets/index-*.js | cut -f1)
          echo "Main bundle size: ${MAIN_SIZE}KB"
          if [ $MAIN_SIZE -gt 500 ]; then
            echo "Main bundle exceeds 500KB limit"
            exit 1
          fi

          # Vendor chunks should be < 200KB each
          for file in dist/assets/*-vendor-*.js; do
            SIZE=$(du -k "$file" | cut -f1)
            echo "Vendor chunk $(basename $file): ${SIZE}KB"
            if [ $SIZE -gt 200 ]; then
              echo "Vendor chunk exceeds 200KB limit"
              exit 1
            fi
          done

  lighthouse:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    needs: [build]
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: ${{ env.WORKING_DIR }}/dist

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Run Lighthouse CI
        working-directory: ${{ env.WORKING_DIR }}
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Check PWA metrics
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          # Ensure PWA score is at least 90
          echo "Checking PWA metrics from Lighthouse report..."
          # This will be implemented based on lighthouse report output

      - name: Upload Lighthouse reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: ${{ env.WORKING_DIR }}/.lighthouseci
          retention-days: 7

  accessibility:
    name: Accessibility Check
    runs-on: ubuntu-latest
    needs: [build]
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: ${{ env.WORKING_DIR }}/dist

      - name: Install axe-core
        run: npm install -g @axe-core/cli

      - name: Serve application
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          pnpm preview &
          # Wait for server to be ready
          timeout 30 bash -c 'until curl -f http://localhost:4173; do sleep 1; done' || echo "Server may not be ready"

      - name: Run axe accessibility tests
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          axe http://localhost:4173 --exit

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs:
      [
        lint,
        type-check,
        test,
        build,
        bundle-analysis,
        lighthouse,
        accessibility,
      ]
    if: always()
    steps:
      - name: Check job results
        run: |
          echo "Lint: ${{ needs.lint.result }}"
          echo "Type Check: ${{ needs.type-check.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Bundle Analysis: ${{ needs.bundle-analysis.result }}"
          echo "Lighthouse: ${{ needs.lighthouse.result }}"
          echo "Accessibility: ${{ needs.accessibility.result }}"

      - name: Fail if critical jobs failed
        if: |
          needs.test.result == 'failure' ||
          needs.build.result == 'failure'
        run: exit 1
