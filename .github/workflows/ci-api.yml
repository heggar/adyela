name: CI - API Backend

on:
  pull_request:
    paths:
      - "apps/api/**"
      - ".github/workflows/ci-api.yml"
  push:
    branches:
      - main
      - develop
    paths:
      - "apps/api/**"
      - ".github/workflows/ci-api.yml"

env:
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "1.8.5"
  WORKING_DIR: apps/api

jobs:
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ${{ env.WORKING_DIR }}/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          poetry install --no-interaction --no-ansi

      - name: Run Black (format check)
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          poetry run black --check .

      - name: Run Ruff (linter)
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          poetry run ruff check .

  type-check:
    name: Type Checking
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ${{ env.WORKING_DIR }}/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          poetry install --no-interaction --no-ansi

      - name: Run MyPy
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          poetry run mypy adyela_api

  test:
    name: Tests & Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ${{ env.WORKING_DIR }}/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          poetry install --no-interaction --no-ansi

      - name: Run tests with coverage
        working-directory: ${{ env.WORKING_DIR }}
        env:
          SECRET_KEY: test-secret-key-for-ci-only
          FIREBASE_PROJECT_ID: test-project
          GCP_PROJECT_ID: test-gcp-project
        run: |
          poetry run pytest --cov=adyela_api --cov-report=xml --cov-report=term --cov-fail-under=65

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ${{ env.WORKING_DIR }}/coverage.xml
          flags: api
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-test-results
          path: ${{ env.WORKING_DIR }}/test-results/
          retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ${{ env.WORKING_DIR }}/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          poetry install --no-interaction --no-ansi

      - name: Run Bandit security scanner
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          poetry run bandit -r adyela_api -f json -o bandit-report.json || true
          poetry run bandit -r adyela_api

      - name: Upload Bandit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: ${{ env.WORKING_DIR }}/bandit-report.json
          retention-days: 30

  docker-build:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    needs: [lint, type-check, test, security]
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.WORKING_DIR }}
          push: false
          load: true
          tags: adyela-api:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: adyela-api:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
          trivyignores: ${{ env.WORKING_DIR }}/.trivyignore

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run Trivy vulnerability scanner (table output)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: adyela-api:${{ github.sha }}
          format: "table"
          exit-code: "0"
          severity: "CRITICAL,HIGH"
          trivyignores: ${{ env.WORKING_DIR }}/.trivyignore

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  contract-tests:
    name: Contract Tests (Schemathesis)
    runs-on: ubuntu-latest
    needs: [test]
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ${{ env.WORKING_DIR }}/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          poetry install --no-interaction --no-ansi

      - name: Start API in background
        working-directory: ${{ env.WORKING_DIR }}
        env:
          SECRET_KEY: test-secret-key-for-contract-tests
          FIREBASE_PROJECT_ID: test-project
          GCP_PROJECT_ID: test-gcp-project
        run: |
          poetry run uvicorn adyela_api.main:app --host 0.0.0.0 --port 8000 &
          echo $! > api.pid

      - name: Wait for API to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

      - name: Install Schemathesis
        run: |
          pip install schemathesis

      - name: Run Schemathesis contract tests
        run: |
          schemathesis run http://localhost:8000/openapi.json \
            --url http://localhost:8000 \
            --checks all \
            --hypothesis-max-examples=50 \
            --hypothesis-deadline=5000 \
            --exclude-deprecated \
            --report

      - name: Stop API
        if: always()
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          if [ -f api.pid ]; then
            kill $(cat api.pid) || true
            rm api.pid
          fi

      - name: Upload contract test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: contract-test-results
          path: schemathesis-report.json
          retention-days: 7

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, type-check, test, security, docker-build, contract-tests]
    if: always()
    steps:
      - name: Check job results
        run: |
          echo "Lint: ${{ needs.lint.result }}"
          echo "Type Check: ${{ needs.type-check.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"
          echo "Contract Tests: ${{ needs.contract-tests.result }}"

      - name: Fail if critical jobs failed
        if: |
          needs.test.result == 'failure'
        run: exit 1
