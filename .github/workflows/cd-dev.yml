name: CD - Development

on:
  push:
    branches:
      - main
    paths:
      - "apps/api/**"
      - "apps/web/**"
      - ".github/workflows/cd-dev.yml"
  workflow_dispatch:

env:
  ENVIRONMENT: development
  GCP_REGION: us-central1
  API_SERVICE_NAME: adyela-api-dev
  WEB_BUCKET_NAME: adyela-web-dev

permissions:
  contents: read
  id-token: write
  pull-requests: write

jobs:
  build-api:
    name: Build API Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/adyela/${{ env.API_SERVICE_NAME }}
          tags: |
            type=sha,prefix={{branch}}-
            type=ref,event=branch
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: apps/api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENVIRONMENT=${{ env.ENVIRONMENT }}

  deploy-api:
    name: Deploy API to Cloud Run
    runs-on: ubuntu-latest
    needs: [build-api]
    environment:
      name: development
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Setup GCP SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run
        id: deploy
        run: |
          gcloud run deploy ${{ env.API_SERVICE_NAME }} \
            --image ${{ needs.build-api.outputs.image-tag }} \
            --region ${{ env.GCP_REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars="ENVIRONMENT=${{ env.ENVIRONMENT }}" \
            --set-secrets="SECRET_KEY=api-secret-key:latest,FIREBASE_PROJECT_ID=firebase-project-id:latest" \
            --min-instances=0 \
            --max-instances=10 \
            --memory=512Mi \
            --cpu=1 \
            --timeout=300s \
            --concurrency=80 \
            --port=8000

          URL=$(gcloud run services describe ${{ env.API_SERVICE_NAME }} --region ${{ env.GCP_REGION }} --format='value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Verify deployment
        run: |
          sleep 10
          curl -f ${{ steps.deploy.outputs.url }}/health || exit 1

  build-web:
    name: Build Web Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        working-directory: apps/web
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL_DEV }}
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_JITSI_DOMAIN: meet.jit.si
          VITE_ENV: ${{ env.ENVIRONMENT }}
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-dist
          path: apps/web/dist
          retention-days: 1

  deploy-web:
    name: Deploy Web to GCS + CDN
    runs-on: ubuntu-latest
    needs: [build-web, deploy-api]
    environment:
      name: development
      url: https://dev.adyela.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-dist
          path: dist

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Setup GCP SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Upload to GCS
        run: |
          gsutil -m rsync -r -d dist gs://${{ env.WEB_BUCKET_NAME }}

          # Set cache control headers
          gsutil -m setmeta -h "Cache-Control:public, max-age=31536000, immutable" \
            "gs://${{ env.WEB_BUCKET_NAME }}/assets/**"

          gsutil -m setmeta -h "Cache-Control:public, max-age=0, must-revalidate" \
            "gs://${{ env.WEB_BUCKET_NAME }}/index.html"

          gsutil -m setmeta -h "Cache-Control:public, max-age=3600" \
            "gs://${{ env.WEB_BUCKET_NAME }}/manifest.webmanifest"

      - name: Invalidate CDN cache
        run: |
          gcloud compute url-maps invalidate-cdn-cache adyela-web-lb-dev \
            --path "/*" \
            --async

  smoke-tests:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-web]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install test dependencies
        run: npm install -g newman

      - name: Run API smoke tests
        run: |
          # Health check
          curl -f ${{ needs.deploy-api.outputs.url }}/health

          # Readiness check
          curl -f ${{ needs.deploy-api.outputs.url }}/readiness

          # OpenAPI spec
          curl -f ${{ needs.deploy-api.outputs.url }}/openapi.json

      - name: Run Web smoke tests
        run: |
          # Check if site is accessible
          curl -f https://dev.adyela.com

          # Check if PWA manifest exists
          curl -f https://dev.adyela.com/manifest.webmanifest

          # Check if service worker exists
          curl -f https://dev.adyela.com/sw.js

      - name: Run Newman API tests
        if: hashFiles('tests/postman/**') != ''
        run: |
          newman run tests/postman/adyela-api.postman_collection.json \
            --environment tests/postman/dev.postman_environment.json \
            --reporters cli,json \
            --reporter-json-export newman-results.json

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-results
          path: newman-results.json
          retention-days: 7

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-web, smoke-tests]
    if: always()
    steps:
      - name: Send Slack notification
        if: ${{ secrets.SLACK_WEBHOOK_URL != '' }}
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "Development Deployment ${{ needs.smoke-tests.result == 'success' && '✅ Successful' || '❌ Failed' }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Development Deployment*\n${{ needs.smoke-tests.result == 'success' && ':white_check_mark: Successful' || ':x: Failed' }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*API:*\n${{ needs.deploy-api.outputs.url }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Web:*\nhttps://dev.adyela.com"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n${{ github.sha }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n${{ github.actor }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create GitHub deployment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'development',
              auto_merge: false,
              required_contexts: []
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: '${{ needs.smoke-tests.result == 'success' && 'success' || 'failure' }}',
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              environment_url: 'https://dev.adyela.com'
            });

  summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-web, smoke-tests]
    if: always()
    steps:
      - name: Check deployment results
        run: |
          echo "Deploy API: ${{ needs.deploy-api.result }}"
          echo "Deploy Web: ${{ needs.deploy-web.result }}"
          echo "Smoke Tests: ${{ needs.smoke-tests.result }}"

      - name: Fail if any job failed
        if: |
          needs.deploy-api.result == 'failure' ||
          needs.deploy-web.result == 'failure' ||
          needs.smoke-tests.result == 'failure'
        run: exit 1
