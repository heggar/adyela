#!/bin/sh

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo "${BLUE}üîç Running comprehensive pre-commit validations...${NC}"

# 1. Run lint-staged (formatting and basic linting)
echo "${BLUE}  ‚Üí Running lint-staged (formatting)...${NC}"
pnpm lint-staged || {
  echo "${RED}‚ùå Lint-staged failed!${NC}"
  exit 1
}

# 2. Check for build artifacts and large files
echo "${BLUE}  ‚Üí Checking for build artifacts and large files...${NC}"
STAGED_FILES=$(git diff --cached --name-only)

# Check for build artifacts
if echo "$STAGED_FILES" | grep -qE '\.(pyc|pyo|pyd|log|tmp)$|htmlcov|dist|dev-dist|node_modules|\.turbo|coverage'; then
  echo "${RED}‚ùå Build artifacts detected in commit!${NC}"
  echo "${YELLOW}Please remove build outputs from staging area:${NC}"
  echo "$STAGED_FILES" | grep -E '\.(pyc|pyo|pyd|log|tmp)$|htmlcov|dist|dev-dist|node_modules|\.turbo|coverage'
  exit 1
fi

# Check for large files (>10MB) - process in batches to avoid command line length issues
echo "$STAGED_FILES" | while read -r file; do
  if [ -f "$file" ]; then
    size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo 0)
    if [ "$size" -gt 10485760 ]; then
      echo "$file"
    fi
  fi
done > /tmp/large_files.txt

if [ -s /tmp/large_files.txt ]; then
  echo "${RED}‚ùå Large files detected (>10MB)!${NC}"
  echo "${YELLOW}Please use Git LFS for large files:${NC}"
  cat /tmp/large_files.txt
  rm -f /tmp/large_files.txt
  exit 1
fi
rm -f /tmp/large_files.txt

# 3. Type checking for changed TypeScript files
CHANGED_TS_FILES=$(echo "$STAGED_FILES" | grep -E '\.(ts|tsx)$' || true)
if [ -n "$CHANGED_TS_FILES" ]; then
  echo "${BLUE}  ‚Üí Type checking TypeScript files...${NC}"
  pnpm type-check || {
    echo "${RED}‚ùå Type checking failed!${NC}"
    exit 1
  }
fi

# 4. Python type checking for changed Python files
CHANGED_PY_FILES=$(echo "$STAGED_FILES" | grep -E '\.py$' || true)
if [ -n "$CHANGED_PY_FILES" ]; then
  echo "${BLUE}  ‚Üí Type checking Python files...${NC}"
  cd apps/api && poetry run mypy . || {
    echo "${RED}‚ùå Python type checking failed!${NC}"
    exit 1
  }
  cd ../..
fi

# 5. Linting for changed files
echo "${BLUE}  ‚Üí Linting changed files...${NC}"
pnpm lint || {
  echo "${RED}‚ùå Linting failed!${NC}"
  exit 1
}

# 6. Security scan with Gitleaks
echo "${BLUE}  ‚Üí Scanning for secrets and sensitive data...${NC}"
if command -v gitleaks &> /dev/null; then
  gitleaks protect --staged --verbose --config .gitleaks.toml || {
    echo "${RED}‚ùå Secret scan failed! Potential secrets detected.${NC}"
    echo "${YELLOW}Please remove any secrets from your changes.${NC}"
    exit 1
  }
else
  echo "${YELLOW}  ‚ö†Ô∏è  gitleaks not installed, skipping secret scan${NC}"
  echo "${YELLOW}  Install with: brew install gitleaks${NC}"
fi

# 7. Check for TODO/FIXME comments in production code
echo "${BLUE}  ‚Üí Checking for TODO/FIXME comments...${NC}"
CRITICAL_TODOS=$(echo "$STAGED_FILES" | xargs grep -l -E 'TODO|FIXME|HACK|XXX' 2>/dev/null | grep -v -E '\.(md|txt)$' || true)
if [ -n "$CRITICAL_TODOS" ]; then
  echo "${YELLOW}  ‚ö†Ô∏è  Found TODO/FIXME comments in:${NC}"
  echo "$CRITICAL_TODOS" | sed 's/^/    /'
  echo "${YELLOW}  Consider resolving these before committing.${NC}"
fi

# 8. Verify commit message format (basic check)
echo "${BLUE}  ‚Üí Verifying commit message format...${NC}"
COMMIT_MSG_FILE=$1
if [ -f "$COMMIT_MSG_FILE" ]; then
  COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")
  if ! echo "$COMMIT_MSG" | grep -qE '^(feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert)(\(.+\))?: .+'; then
    echo "${YELLOW}  ‚ö†Ô∏è  Commit message doesn't follow conventional format${NC}"
    echo "${YELLOW}  Expected: type(scope): description${NC}"
    echo "${YELLOW}  Example: feat(auth): add OAuth login${NC}"
  fi
fi

# 9. Run quick tests for changed files (if any test files changed)
CHANGED_TEST_FILES=$(echo "$STAGED_FILES" | grep -E '\.(test|spec)\.(ts|tsx|js|jsx|py)$' || true)
if [ -n "$CHANGED_TEST_FILES" ]; then
  echo "${BLUE}  ‚Üí Running tests for changed test files...${NC}"
  # Only run tests for the specific files that changed
  echo "${YELLOW}  Test files changed, consider running: pnpm test${NC}"
fi

echo "${GREEN}‚úì All pre-commit checks passed!${NC}"
echo "${GREEN}üöÄ Ready to commit!${NC}"
