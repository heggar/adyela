"""Create appointment use case."""

from datetime import datetime

from adyela_api.application.ports import AppointmentRepository, PractitionerRepository
from adyela_api.config import AppointmentType
from adyela_api.domain import Appointment, BusinessRuleViolationError
from adyela_api.domain.value_objects import DateTimeRange, TenantId


class CreateAppointmentUseCase:
    """Use case for creating a new appointment."""

    def __init__(
        self,
        appointment_repository: AppointmentRepository,
        practitioner_repository: PractitionerRepository,
    ) -> None:
        self.appointment_repository = appointment_repository
        self.practitioner_repository = practitioner_repository

    async def execute(
        self,
        tenant_id: str,
        patient_id: str,
        practitioner_id: str,
        start_time: datetime,
        end_time: datetime,
        appointment_type: AppointmentType,
        reason: str | None = None,
    ) -> Appointment:
        """Execute the create appointment use case."""
        # Validate practitioner exists and is active
        practitioner = await self.practitioner_repository.get_by_id(practitioner_id)
        if not practitioner or not practitioner.is_active:
            raise BusinessRuleViolationError("Practitioner not found or inactive")

        # Check if practitioner belongs to the same tenant
        if str(practitioner.tenant_id) != tenant_id:
            raise BusinessRuleViolationError("Practitioner does not belong to this tenant")

        # Check practitioner availability
        is_available = await self.appointment_repository.check_availability(
            tenant_id=tenant_id,
            practitioner_id=practitioner_id,
            start_time=start_time.isoformat(),
            end_time=end_time.isoformat(),
        )

        if not is_available:
            raise BusinessRuleViolationError(
                "Practitioner is not available in the selected time slot"
            )

        # Create appointment
        appointment = Appointment(
            id="",  # Will be generated by repository
            tenant_id=TenantId(tenant_id),
            patient_id=patient_id,
            practitioner_id=practitioner_id,
            schedule=DateTimeRange(start=start_time, end=end_time),
            appointment_type=appointment_type,
            reason=reason,
        )

        # Save appointment
        created_appointment = await self.appointment_repository.create(appointment)

        return created_appointment
