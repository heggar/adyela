[tool.poetry]
name = "adyela-api"
version = "0.1.0"
description = "Adyela Medical Appointments API with FastAPI and Hexagonal Architecture"
authors = ["Adyela Team <dev@adyela.care>"]
readme = "README.md"
packages = [{include = "adyela_api"}]

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.115.0"
uvicorn = {extras = ["standard"], version = "^0.32.0"}
pydantic = "^2.9.0"
pydantic-settings = "^2.6.0"
python-multipart = "^0.0.20"
email-validator = "^2.2.0"

# Firebase & GCP
firebase-admin = "^6.5.0"
google-cloud-firestore = "^2.19.0"
google-cloud-secret-manager = "^2.21.1"

# Authentication
passlib = {extras = ["bcrypt"], version = "^1.7.4"}

# External Services
twilio = "^9.3.7"
sendgrid = "^6.11.0"

# Rate Limiting & Caching
slowapi = "^0.1.9"
redis = "^5.2.0"

# Monitoring & Logging
structlog = "^24.4.0"
python-json-logger = "^3.2.1"
sentry-sdk = {extras = ["fastapi"], version = "^2.18.0"}

# HTTP Client
httpx = "^0.28.0"

# Utilities
python-dateutil = "^2.9.0"
pytz = "^2024.2"
python-jose = {extras = ["cryptography"], version = "^3.5.0"}

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.0"
pytest-asyncio = "^0.24.0"
pytest-cov = "^6.0.0"
pytest-mock = "^3.14.0"
httpx = "^0.28.0"
faker = "^33.1.0"

# Linting & Formatting
ruff = "^0.8.0"
black = "^24.10.0"
mypy = "^1.13.0"
isort = "^5.13.0"

# Type stubs
types-python-jose = "^3.3.4"
types-passlib = "^1.7.7"
types-python-dateutil = "^2.9.0"
types-redis = "^4.6.0"
bandit = "^1.8.6"

[tool.poetry.scripts]
dev = "uvicorn adyela_api.main:app --reload --host 0.0.0.0 --port 8000"

[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = [
    # Core rules
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    
    # Security
    "S",  # flake8-bandit (security)
    "TCH", # flake8-type-checking
    
    # Performance
    "PERF", # perflint
    
    # Code quality
    "SIM", # flake8-simplify
    "FURB", # refurb (modernization)
    "RUF", # ruff-specific rules
    
    # Documentation
    "D",  # pydocstyle
    
    # Additional quality rules
    "ARG001", # unused-function-args
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate (remove commented code)
    "TRY", # tryceratops (better exception handling)
    "FLY", # flynt (f-string conversion)
    "PL",  # pylint
    "NPY", # numpy
    "AIR", # airflow
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "W191", # indentation contains tabs
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "TRY003", # avoid specifying long messages outside exception class
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__
    "S101", # Use of assert detected
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
    "S603", # subprocess call - check for execution of untrusted input
    "S607", # Starting a process with a partial executable path
    "ARG001", # unused function argument (common in framework callbacks/handlers)
    "TRY300", # consider moving statement to else block (stylistic preference)
    "TRY301", # abstract raise to inner function (overly strict)
    "TRY401", # redundant exception in logging.exception (stylistic preference)
    "PLR2004", # magic value in comparison (acceptable for simple validations)
    "D200", # one-line docstring should fit on one line (formatting preference)
    "D205", # 1 blank line required between summary and description (formatting preference)
    "S104", # binding to all interfaces (required for Docker/Cloud Run)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "google.cloud.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "firebase_admin.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --cov=adyela_api --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
pythonpath = ["."]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "contract: Contract tests",
    "slow: Slow running tests",
]

[tool.coverage.run]
source = ["adyela_api"]
omit = ["tests/*", "**/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
fail_under = 80
show_missing = true
precision = 2

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
